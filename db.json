{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/avator.jpg","path":"avator.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"46e8a3fabcde1c4e5fb4c89e12855a7434bfd658","modified":1573268966378},{"_id":"source/CNAME","hash":"1132119aa5d0f85c68834c997880af95bf424ab9","modified":1573268966376},{"_id":"source/.DS_Store","hash":"5fe401b8d68c85e17f3d140463a99279497c5f0b","modified":1573268966372},{"_id":"source/avator.jpg","hash":"2d5947eaf92f197b6059ee242a91f2503a7ec3ac","modified":1573268966472},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1573271861711},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1573271861707},{"_id":"themes/next/.gitignore","hash":"d9021ac0041b511356fc7044cb02c6e0e567d706","modified":1573271861817},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1573271861702},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1573271861866},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1573271861830},{"_id":"themes/next/_config.yml","hash":"ad8fafd4fb33f20ac4a069080537f84cda579aa1","modified":1575013468010},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1573271861823},{"_id":"themes/next/package.json","hash":"c4b5e96ccfa6956348c57e15dfa6047935af807c","modified":1573271863319},{"_id":"themes/next/README.md","hash":"cea1e65e6e0309c2f7793b1889ecec05ef05725c","modified":1573271861842},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1573271861835},{"_id":"themes/next/gulpfile.js","hash":"c4cffe4df4ba406d9ab347bc52a0c8059c5050b1","modified":1573271862013},{"_id":"source/_posts/React父组件和子组件解耦方案.md","hash":"31e9de74a6a685f47463db3c88325126a9a9aa7a","modified":1573268966405},{"_id":"source/_posts/Create-react-app中使用装饰器语法.md","hash":"631f5bc7c90857f4396db3dcc06d18a44a58bde3","modified":1573268966387},{"_id":"source/_posts/.DS_Store","hash":"31a2b631ba43e8faa25d2818bba58f764d59d6a0","modified":1573268966381},{"_id":"source/_posts/hexo发布文章流程记录.md","hash":"9e1f2dd685c50492b261d74c6fc9091d54d97c4b","modified":1573268966409},{"_id":"source/_posts/函数式编程系列（一）总览.md","hash":"a4217bcc3cebf74d1964170f9c3fe1d95270c0c0","modified":1573268966468},{"_id":"source/_posts/react中减少render臃肿的方法.md","hash":"3458406125e8993badcf2f9bdfaaba6b46d5f510","modified":1573268966462},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1573271861642},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1573271861672},{"_id":"source/_posts/mobx初探.md","hash":"06b40140ec706d7695769b247a3101256144605a","modified":1573268966413},{"_id":"themes/next/.git/index","hash":"b9e9571fded93bdba03dd725339e4b466e563cea","modified":1573271866156},{"_id":"themes/next/.git/packed-refs","hash":"016f31117fe5c4fc09504fd60b3e37bed6fcc82d","modified":1573271861616},{"_id":"source/tags/index.md","hash":"54d84cb3c22bcf1154873f2117300b96b948cf55","modified":1573268966478},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1573271276740},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"15b0ac46f260743c925ab2eba3f081640a21cd3a","modified":1573271861757},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1573271861717},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"06b62d1b37ed1b48210fe27158e83b4dbc5ed23d","modified":1573271861724},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1573271861763},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1573271861777},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1573271861770},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1573271861793},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"18eddb3ba5e94cac0642134581f86e26f568d388","modified":1573271861782},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1573271861787},{"_id":"themes/next/.github/stale.yml","hash":"b2b762645d3c3e373e0b2c861bf2ddf7f303c577","modified":1573271861806},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1573271861801},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1573271861812},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5ace79ff1859d985339fdf6d74b779f60c91a27a","modified":1573271861879},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1573271861872},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1573271861917},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1573271861886},{"_id":"themes/next/docs/DATA-FILES.md","hash":"062b36699c78676a25e3da95bb197841adb600ba","modified":1573271861892},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"356ada9837300bcdd1711321dabc309887e23730","modified":1573271861908},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1573271861899},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1573271862028},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"20e2223836233c812f268b4a7050762dd56cf2be","modified":1573271861929},{"_id":"themes/next/languages/de.yml","hash":"c94ff69db40c22de61ce6446cdc9108177379074","modified":1573271862023},{"_id":"themes/next/docs/MATH.md","hash":"6f6faf58f86b03b9344ef857ae34de97fc336590","modified":1573271861922},{"_id":"themes/next/languages/es.yml","hash":"203084eace039610ac097e0e6ce6b5f4f8356217","modified":1573271862038},{"_id":"themes/next/languages/en.yml","hash":"f6a8d95948762c978d2ed065c5f87d2061aa6fc1","modified":1573271862033},{"_id":"themes/next/languages/fa.yml","hash":"856e19aec28767e1f91a8e805011f82c7601ec60","modified":1573271862043},{"_id":"themes/next/languages/fr.yml","hash":"a9ac6ce36e97a06ad6ab3431eb652b8702b7a63e","modified":1573271862048},{"_id":"themes/next/languages/it.yml","hash":"08b2db3eece91edd2759ca4b26de74b2992c7dae","modified":1573271862065},{"_id":"themes/next/languages/id.yml","hash":"1c321f62378dc029f7b795ad2fcb0f80277de52f","modified":1573271862059},{"_id":"themes/next/languages/ko.yml","hash":"4f3a4165ceaaada238316fe8bd2438f775abebfc","modified":1573271862077},{"_id":"themes/next/languages/hu.yml","hash":"313894fd5615e37c1935a235f8f702df7852345a","modified":1573271862053},{"_id":"themes/next/languages/pt.yml","hash":"7d3f040065b0a04a23d3be42ddfcafc95f79854e","modified":1573271862101},{"_id":"themes/next/languages/nl.yml","hash":"387ea251057164f8dcd38553bac01a909cf11f0d","modified":1573271862082},{"_id":"themes/next/languages/ja.yml","hash":"8341ccdd1b2fbf11e9d80c1aacd37a969c57ca9c","modified":1573271862070},{"_id":"themes/next/languages/uk.yml","hash":"aa90a1b6f12f5bae1ff6386ea99c63db901179a8","modified":1573271862117},{"_id":"themes/next/languages/pt-BR.yml","hash":"075140b21edd6cb0ec1e9b3e79e1339d1e1a17e4","modified":1573271862094},{"_id":"themes/next/languages/ru.yml","hash":"ca8f3c22fb10cf3e455890e0f1f2b29b8814a702","modified":1573271862107},{"_id":"themes/next/languages/vi.yml","hash":"a5f60a2b3dc1b90b867e99dd3b108113a04f9ba5","modified":1573271862122},{"_id":"themes/next/languages/zh-HK.yml","hash":"1c8b8ad49a15ea3491555a2ae1819b1ad405fab2","modified":1573271862157},{"_id":"themes/next/languages/tr.yml","hash":"c99f21a9cb86957618428e488ece24df063222f3","modified":1573271862111},{"_id":"themes/next/languages/zh-CN.yml","hash":"8c70af9442f12aa65e8737774ea032bb6420a715","modified":1573271862152},{"_id":"themes/next/languages/zh-TW.yml","hash":"7402f4b899dbeead3641417bfaf5f46f3a3934a5","modified":1573271862162},{"_id":"themes/next/layout/archive.swig","hash":"54a96d109374536b5f2ef1bb8b6f82825dc810c9","modified":1573271863254},{"_id":"themes/next/layout/index.swig","hash":"014202a6e316096f85f8c1489568d31212c5f1b2","modified":1573271863275},{"_id":"themes/next/layout/category.swig","hash":"9febc49ff6f476fd0261c75aecbc67cc24c11667","modified":1573271863265},{"_id":"themes/next/layout/_layout.swig","hash":"6eb89a44dc5e958b41df8a673cc28f67bb56ccf3","modified":1573271862168},{"_id":"themes/next/layout/page.swig","hash":"8322d902a8d870e6d0b0bc25750141c51749bf8b","modified":1573271863286},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1573271863614},{"_id":"themes/next/layout/post.swig","hash":"d75078e7acd9ead60dee9bec05b2b4f60e121177","modified":1573271863298},{"_id":"themes/next/layout/tag.swig","hash":"eedd3a19aa5222184ea6ee628fa46dfa0654ece8","modified":1573271863308},{"_id":"source/_posts/Create-react-app中使用装饰器语法/1551331520473.png","hash":"941c49f3c4f7790310d4aa6ea05b99387978ef68","modified":1573268966398},{"_id":"source/_posts/Create-react-app中使用装饰器语法/1551335060987.png","hash":"25ba4998d4154a48daccc6f7305948df46f1213a","modified":1573268966400},{"_id":"source/_posts/Create-react-app中使用装饰器语法/1551335316388.png","hash":"83ebee6639a33c23bd6d9f20ebc805adf2a7260e","modified":1573268966403},{"_id":"source/_posts/mobx初探/10.png","hash":"9ddf6640777dbc1a64b1bc6cc51cc1ebb8354d7d","modified":1573268966426},{"_id":"source/_posts/Create-react-app中使用装饰器语法/.DS_Store","hash":"4f02f4cb442f8cf401f18bac1df7b7291cb35c99","modified":1573268966393},{"_id":"source/_posts/mobx初探/1.png","hash":"1120364c7a9b7454307316c5c8233edbca83cf6b","modified":1573268966424},{"_id":"source/_posts/mobx初探/11.png","hash":"a35ae482b68846c252179043e51589c7f2e0d41d","modified":1573268966429},{"_id":"source/_posts/mobx初探/.DS_Store","hash":"73e31986e2e20f0aa8e3f14a08cb63dac94adeb7","modified":1573268966419},{"_id":"source/_posts/mobx初探/2.png","hash":"c1793dd0ae3d8d19589c744e6367344b8bb0b1e6","modified":1573268966442},{"_id":"source/_posts/mobx初探/4.png","hash":"71fbb849b628c8b5233d7340d5bbbd24d12f8b85","modified":1573268966447},{"_id":"source/_posts/mobx初探/3.png","hash":"a85e4e2176be09a63a4ebf07b7b75311a36e3793","modified":1573268966445},{"_id":"source/_posts/mobx初探/5.png","hash":"d0b0b90337b4b00480332421e6a1ea2f2441abce","modified":1573268966449},{"_id":"source/_posts/mobx初探/6.png","hash":"942b800cbbdc9afa5ffb1bf02924bbbe18fc8373","modified":1573268966452},{"_id":"source/_posts/mobx初探/7.png","hash":"4323e4be2ee3b0a6faa6605a4439ab75d01a32fb","modified":1573268966455},{"_id":"source/_posts/mobx初探/8.png","hash":"b8602c26ad1f1267d3cd7b209b07980938f44ff7","modified":1573268966457},{"_id":"source/_posts/mobx初探/9.png","hash":"88edc35c3f7607ea0b5c5cb3983eb942d97ba4a1","modified":1573268966459},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1573271276761},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1573271276752},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1573271276783},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1573271276809},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1573271276770},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1573271276793},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1573271276816},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1573271276800},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1573271276825},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1573271276850},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1573271276831},{"_id":"themes/next/.git/logs/HEAD","hash":"30b1d59bfe332a83508786e4d3d5b64557e3ef8a","modified":1573271861654},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1573271276840},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"6f669d3ac018915a130d72e483666d0d63560c94","modified":1573271861735},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"dea66b33b57f18b3ab6d807741c7cf776366f6d2","modified":1573271861741},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"5804fc485a683839b797003ce6402b907ed5791d","modified":1573271861751},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"efe32a27eb47ff28dc2a3783a50dbde5a4627b9f","modified":1573271861746},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"6db9eb0e2393a391a5e17b62a43b264fce5ed018","modified":1573271861936},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"510cfd27e37e3a611649a3d1a84cc52fd4da5936","modified":1573271861951},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1573271861941},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"fcbe8e8d7ad39028936ba341f4154e4f9234d8b2","modified":1573271861957},{"_id":"themes/next/docs/ru/README.md","hash":"7b5fa4461646677e4ab5cb271477795987ba1ab3","modified":1573271861946},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"a7de5ce2931290a67feebd149e41a9648de4bb83","modified":1573271861976},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7202fd76db39f8246a0f80aab68b720d89f48af1","modified":1573271861964},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1573271861981},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"ff3a003820ccc63c06a6df2117d023959c7cf4ec","modified":1573271861969},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"e93a800008567dd48b6f388982ec72db91bb913a","modified":1573271862008},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"bfd10209878e6252467311f9544841751c465058","modified":1573271861995},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8845e67bc594a5cdbfad617374faef34230841c6","modified":1573271862001},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"9916a1a0883d5807ddc0cc2607c878d1e1f5fa0a","modified":1573271861987},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"db25de9ceaa1ec5650ff15cf4aee4399ed8f9c42","modified":1573271862176},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"be603e35bea3431b133fcd4b9626993dcfb85c06","modified":1573271862192},{"_id":"themes/next/layout/_macro/post.swig","hash":"cb456a03e794f04b081d03fe9e3ccc148cafaf22","modified":1573271862183},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"29ce76e36011da76c50d482396e2558f72525fe0","modified":1573271862305},{"_id":"themes/next/layout/_partials/footer.swig","hash":"209a519aec6773c84edaf8ef714674b225e6e7f0","modified":1573271862215},{"_id":"themes/next/layout/_partials/comments.swig","hash":"223bd7b04acb32ddbe813f21a75290e1461630fb","modified":1573271862199},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1573271862544},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1573271862553},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1573271862531},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1573271862647},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1573271862995},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1573271862793},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1573271862657},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"f1c4611c543eddf364dce68dd9825f3df958aab3","modified":1573271862595},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"206644ff2c769226a58a9039eda9206302460626","modified":1573271863078},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"fef4bfec70cb877c23c7a6b096d35b1579d0e2b2","modified":1573271863061},{"_id":"themes/next/source/css/main.styl","hash":"ee7c731c03d724827d9324d08be701c9d2f04c60","modified":1573271864739},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1573271864757},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1573271864774},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1573271864782},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1573271864809},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1573271864787},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1573271864851},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1573271864837},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1573271864934},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1573271864943},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1573271864866},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1573271864911},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1573271864885},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1573271864938},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1573271864960},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1573271864985},{"_id":"themes/next/source/js/algolia-search.js","hash":"f632ff7a404ac4fb04313bc554815406ebcb2a0b","modified":1573271865006},{"_id":"themes/next/source/js/bookmark.js","hash":"6531c706f34c38d8b44afebfac60cc35171d36f3","modified":1573271865071},{"_id":"themes/next/source/js/motion.js","hash":"5295f7afffcb10c4e6bc5ef172f50ecf1497aeb3","modified":1573271865301},{"_id":"themes/next/source/js/next-boot.js","hash":"ed1cbdee2c363a71c9f09e66412d2f395a506e4b","modified":1573271865379},{"_id":"themes/next/scripts/events/index.js","hash":"37347490d7960955e65f0a172aaae6423e7eec48","modified":1573271863336},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1573271863506},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1573271863520},{"_id":"themes/next/source/js/utils.js","hash":"ae7714d74d4029fbd9d9a86ae42885c20f42cae3","modified":1573271865531},{"_id":"themes/next/scripts/filters/locals.js","hash":"051f7f579e76028a3979c269a8666a64c020ebc4","modified":1573271863535},{"_id":"themes/next/scripts/filters/post.js","hash":"7c86c0fb9179e02e0e530c9b90483cd3db2a400d","modified":1573271863555},{"_id":"themes/next/source/js/local-search.js","hash":"7b0ac87fd6a3cc43d538fe6228429c97876173b6","modified":1573271865103},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1573271863544},{"_id":"themes/next/scripts/helpers/engine.js","hash":"a2d2f19271ad1d347c05c3195b5d3f53d2eb8af4","modified":1573271863571},{"_id":"themes/next/scripts/helpers/font.js","hash":"20317a314d2283e4f87c8c8d247422f33427ebbe","modified":1573271863587},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3340964985ada2ad6beb7ec8a3321eacbdc61980","modified":1573271863599},{"_id":"themes/next/scripts/tags/button.js","hash":"39156bf735c1d1ebd0d418c411f14ff4f0acdd75","modified":1573271863631},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"6fbc5764dddca114667f1487120a9ed32519857b","modified":1573271863648},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1573271863665},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8e1befa08c07f822f9487978dbd27db60fb700c7","modified":1573271863679},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1573271863705},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"a9699dbc5c5fd569fba84538ebf0ed61ce5fa9e4","modified":1573271863694},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1573271863714},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1573271863736},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1573271863723},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1573271863746},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1573271863758},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573271864395},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573271864397},{"_id":"source/_posts/mobx初探/13.png","hash":"2da7159a5dd6fd2db402d11005683d01bca73099","modified":1573268966437},{"_id":"themes/next/.git/refs/heads/master","hash":"1c8ca7dbed57b8e052579cfee28ac98b37111eba","modified":1573271861649},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"94edc28022325ba21b4e23bb13e1fac337223adc","modified":1573271862249},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"2eb7c38ce833e9c5aa7967528af123c36971af5a","modified":1573271862255},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"36d64a542b709490489c8c61269216f47241793a","modified":1573271862242},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"abef4951b8f0eb5fd11067b775b0144c613e8237","modified":1573271862261},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"cdae167fbf8ef9904d52a2b76579bc8ca0c5458d","modified":1573271862269},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"8fc1611774b54a8afee1792c4d8ab2d9581a259b","modified":1573271862222},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"b3b4ffcbda422d7fc21ee43fec7d2a5056b2f381","modified":1573271862296},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1573271862284},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1573271865584},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"07db7b202ba7d7c849704e175a85a0e6db44fdcc","modified":1573271862231},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1573271862358},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"d3fa29e2d83f29357760e02f32fb5597db8aa780","modified":1573271862332},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"f9017a2deb2f262912476e94822081bb10ee43af","modified":1573271862476},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1573271862415},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"c6d3b1a3fae969d9c03ee48207925fc71e0a63d9","modified":1573271862450},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"d8cfbb6a52e8c1a0831f912e219b6b47c73c57dc","modified":1573271862517},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1573271862626},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"98453ac4a520b2600181fc0331f0067125d0ed4f","modified":1573271862506},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f1107c28661370e10e1940bff856f22f14f08518","modified":1573271862486},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1573271862637},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1573271862615},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1573271862643},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"026087c0be7ec598eba9df2e877cfebf8850d651","modified":1573271862563},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1573271862738},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1573271862779},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1573271862671},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c378efaef4052dbeda0c2356b2b90f2d26eeb83a","modified":1573271862922},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"f2ef530c77798b19653b4fd3339cc6ae3b9f0afe","modified":1573271862700},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"0f703d0cfca6149d4ada7af346ce4adbf257fd18","modified":1573271862888},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"a4402ded51db062d293a53de40dcf206a16e684e","modified":1573271862936},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"ef38217a457749e528cf00c487b99cb963ccfbea","modified":1573271862948},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1573271862849},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"a748a1e25df83ab8f53e4c9bc3370139912c3877","modified":1573271862965},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"a7a26afd3118e036621f802bad42c0cbcced9676","modified":1573271862865},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1573271863005},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1573271863019},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1573271863108},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"e8aa0ba146b658ae3b73efc4ca63325886bbaa2d","modified":1573271862819},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"35fb1f6438111451ccfbb8ba4a6a8424259c0149","modified":1573271863098},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1a8bdd6fa16f609872c8f92b546e29a16031b1f5","modified":1573271863035},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1573271863141},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"5b5618c2f6ad1d7971e6db257222fce89aa56565","modified":1573271863131},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1573271863117},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"ec3c1cd6ace7e6a01b490ac323a4e1ec1fa65fd1","modified":1573271863177},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"edeb02d4d56c11536eaed5a8b4705b717f357895","modified":1573271863150},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"6c007dd76f1cb8171681d7437ec1498ca1229466","modified":1573271863185},{"_id":"themes/next/layout/_third-party/statistics/tencent-mta.swig","hash":"a2bfea40acc9e18d1cd73edc52df57278b746e81","modified":1573271863220},{"_id":"themes/next/layout/_third-party/statistics/tencent-analytics.swig","hash":"c7b55198361ffd96b921b37ca90f6adfccf0d391","modified":1573271863202},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"b58ed9dabc5be0090647d9a0afc43359e1e0e14c","modified":1573271864386},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1619130f81e091bb9ac43f93814f594dd1739255","modified":1573271864398},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"42e7beed8c7583e0c0612692eebfa5743cc4d006","modified":1573271863244},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"db17f093ecf23e960a32af661c6b9a0651281a6b","modified":1573271863231},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f6517f04ee9c8d93d1667c5617116f03ce1942a2","modified":1573271864638},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5832f04fab4e4224bca6dc31a3d94da034a20861","modified":1573271864653},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"a0e0628fc958dfe794e2c073301f7c2ba00e20f1","modified":1573271864405},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1ff4303ad83f96b152be571d4df07969199d5930","modified":1573271864670},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"0bccf86c88e4d27b41f75bf166e66480c7bf919c","modified":1573271864686},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1573271865807},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1573271865832},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc48141e45c9c1275013cdd5d552e4867ae92810","modified":1573271864703},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"8138e7d3e98a59a8a23daa98deac4c0024838b09","modified":1573271865469},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a8aea6d062c2859b503ea1bb8b7c9ce364ed9100","modified":1573271865431},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1573271866008},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"9a3a1ad60c51926e286d92063b19ec03b60d37b7","modified":1573271863389},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1573271866071},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"31a6c8fbdfa16112b0b099727437b9df7641d421","modified":1573271863404},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1573271863421},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"f53cf433714bfef152d5e5463c748216c196e460","modified":1573271863455},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"2f5d1cdc9e1c3498c3d59da01bd89e3e45cd95d3","modified":1573271863441},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1573271863467},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"5b7ecbaf1ea67aed4df38ba69a7bf5e67ec843c2","modified":1573271863488},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"76b2dc98b63180c2e082727fc71c4f576b3ff43d","modified":1573271863478},{"_id":"themes/next/scripts/events/lib/config.js","hash":"2ebf60495afccfef49eb35e28bc672f531a316b1","modified":1573271863349},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1573271863365},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"5881c603e671ac97176c34309fc5c13f57bb4e1b","modified":1573271863377},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1573271865852},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1573271865842},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1573271865862},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"30b1d59bfe332a83508786e4d3d5b64557e3ef8a","modified":1573271861659},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1573271861636},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"daf188e77bd9d9fcff74c5659e875ebdd2010f08","modified":1573271863795},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bf86c81c57db3ed8fbb67df44fc2c0a79cd6ffd6","modified":1573271863783},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"672866ede12bc2dd0835858f2697703fbc9dacb2","modified":1573271863775},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"fbcffb91e7f1ca3cde988353e36e4bf75770a8e8","modified":1573271863975},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"4052c6c598a9dc443ffac171cc6cb31e981c5e5d","modified":1573271863983},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"ca1da6314c123f1bf0a95feefb073f08bb8c256a","modified":1573271864129},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"78406dfb644b0e516f697aead3ed5d545c5b8144","modified":1573271864120},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"5772ee6cdc50a9e1a4425d79114d46065babe217","modified":1573271864241},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"5c27faaaf5a201d1c41c08ad5bfe1757a894fd69","modified":1573271864233},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1efa25a0efc072a65735c3c7d19267ce958afbbe","modified":1573271864221},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1573271864301},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1573271864288},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"77015610da04ec0214d14e65effd0d87f3ff9dec","modified":1573271864319},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1573271864309},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1573271864380},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"9a7d7502ce394ddeba1773f90bbe19016b0cf0f6","modified":1573271864468},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1573271864525},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1573271864540},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3923dccd95e404c6c8d4578306551d40f230c62d","modified":1573271864498},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1573271864478},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"4dc216cb9f1c12bf7720012fd24e126ef6a4eca7","modified":1573271864513},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f03bde9f5804b14f6b297e22a4f0de9a25b38914","modified":1573271864430},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5ae9f601b4c85afe33c5fe338b371b507d6f351c","modified":1573271864436},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"404ecb2e51eb85020eee2405372cc4c4946106ad","modified":1573271864419},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1573271864458},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"68f4854a327a51c2092c6d605ed195dfaf413823","modified":1573271864442},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d7a59c099ba678e13e55163b6675776c7266aebe","modified":1573271864570},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"7199707befa5469f2a3fb18ca49c2e0ff2c62ee0","modified":1573271864452},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"55a1e7deda42cb3318d1e19b904c9c91891659f3","modified":1573271864554},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"111766f2494ae2b7d6f432c9eb3bda4793e47f9a","modified":1573271864621},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"1ae5f3b48300457940102f2201fba7b8547ace4b","modified":1573271864612},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1573271865878},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1573271865943},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1573271864633},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0f4f40e93a0127feadb0bedbe3f8e069a288fae0","modified":1573271864588},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1573271865909},{"_id":"source/_posts/mobx初探/12.png","hash":"411728071cc29e22baff4536ad222b8b04b53e4d","modified":1573268966433},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573271865986},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573271865999},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"30b1d59bfe332a83508786e4d3d5b64557e3ef8a","modified":1573271861632},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1573271863810},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1573271863817},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1573271863802},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"a22c639cdf1073c9d060af62233125991ddf4dd5","modified":1573271863839},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"686c780e6a483a2e494d9aab682803666ef63b3b","modified":1573271863831},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"724ca213d15ae27158c2cddf9c26d3dba3582283","modified":1573271863864},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a5ef170128ab8bc9c0336d6d8d082a97f677563e","modified":1573271863874},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"49bebe05a149f9fffba8d7d004a617e8a6e5e660","modified":1573271863847},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"616b11ef7a87751b164ad6d55923833ea475c988","modified":1573271863885},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"37701d40233a587401bcfc5ede056d8d1a8ba006","modified":1573271863857},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4af60e5cfc8161e93b27090400ff74b8e2f84eea","modified":1573271863905},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"bb1cdbe39d9948474f80d0915ac9cf9cf63fbe7f","modified":1573271863923},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f0a5b3b7f9f18d37595eafb1809312d4b7965c58","modified":1573271863932},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1573271863948},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1573271863997},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1573271863956},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1573271864006},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"c5ecffcb9b22308f2049a2ff46f8f57067148ba4","modified":1573271863964},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1573271864038},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1573271863939},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1573271864016},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"d38a6b55ceea75016e73908ce9e223f9147e123c","modified":1573271864046},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"089e9e3ec17e68a7cfec5ae065e958eb40dbf71e","modified":1573271864024},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"459a39c54e4a16db287f390160fc06a829d64160","modified":1573271864069},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"f7977cfacaca9db6fab4d154486ad57ec4b0fde9","modified":1573271864053},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1573271864079},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"de55bc28b9ecbc5fb66a177c2db735223e04e54c","modified":1573271864087},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0bd0f4a28b3362898f4d9061b307b12bd128f6b0","modified":1573271864061},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3e6287e2241eac9a4090b452cd270c37dc240ed2","modified":1573271864095},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"19677978a4b2b0712d20fee15e952a78e7ba6365","modified":1573271864107},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"bfbb2b8dfceb79c5adcc31338f9cc8efdd3c1bc6","modified":1573271864144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"400c180753d3517a7332108d83ea7f2e7acbceca","modified":1573271864160},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1573271864135},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"00b2055f170e54267321d27118e0a7f07d10890b","modified":1573271864151},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1573271864168},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"7406d2b31b9d329043160191c98232e5aeebbc2c","modified":1573271864174},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1573271864191},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"f6f6306a3975c1544688b95a139af8d9262499b4","modified":1573271864202},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a78eb9f212f405378bd38582742581d26a57fe7f","modified":1573271864185},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"a782cd5ceee062fdfb91a9732017d19672973784","modified":1573271864212},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1573271864261},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"d7a4bb39b50be363afaf143be05e8bc1f409c86e","modified":1573271864269},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"0bf030b71cc75d7d2c0517c9f2ed61d1dba7722d","modified":1573271864251},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1573271864274},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"4727e2721029acc7f70ea6a0f2775d6aa289edaf","modified":1573271864334},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"77d4f332cf805aa7d294346c99e2d72afe2e82a4","modified":1573271864339},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"8c318a485c56dbdcdb22fd00781484ecc151bf8a","modified":1573271864327},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"c9337e837f10c5f40c27a0c0a012f39dfadc7572","modified":1573271864355},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573271865971},{"_id":"themes/next/.git/objects/pack/pack-50a1fa003e87c835db70017d7671555dc3ef28dc.idx","hash":"562b9f3ec4cfe236ea0f2fff7b79c99536374ef4","modified":1573271861382},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1573271864371},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"4ef9d8d3e4a00d622f0dd22418a0848eed9dcc17","modified":1573271864347},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"1bb94cf2d8d3dbb4e2cb1d617df0137046fe90fc","modified":1573271864363},{"_id":"themes/next/.git/objects/pack/pack-50a1fa003e87c835db70017d7671555dc3ef28dc.pack","hash":"15ad6c564b4a7e9e6f907e013161ee32d70e2b0f","modified":1573271861370},{"_id":"public/tags/index.html","hash":"eb96325f7cd81fd89bba8f325ca04537dc3f4f44","modified":1575013617306},{"_id":"public/2019/03/10/函数式编程系列（一）总览/index.html","hash":"829ad1fbe363dbd16076a3a7377822c079e3274c","modified":1575013617306},{"_id":"public/2018/11/09/hexo发布文章流程记录/index.html","hash":"b45886cf8c755cd935c5c3c77b4d412db090569f","modified":1575013617306},{"_id":"public/archives/2018/index.html","hash":"e42cc657bd766d552c35c292fd4984c7d0ecb6a8","modified":1575013617306},{"_id":"public/archives/index.html","hash":"eb2f463aa15399476cb26cc96130632e28fec442","modified":1575013617306},{"_id":"public/archives/2019/index.html","hash":"5705bd0bbfb6f0997c9c205ad1a7a215db16a5b4","modified":1575013617306},{"_id":"public/archives/2018/11/index.html","hash":"82617b069fb9871b31912308ec0ddb20cd0b710b","modified":1575013617306},{"_id":"public/archives/2019/03/index.html","hash":"05ea5707bcdf3e17e7a2f8a16e7cf727c035bde2","modified":1575013617306},{"_id":"public/archives/2019/04/index.html","hash":"9a7d2bad77ccf670e719d0488850d810550c37c6","modified":1575013617306},{"_id":"public/tags/React/index.html","hash":"4cb13657e2456e36fbaa770689996cc709f6731e","modified":1575013617307},{"_id":"public/tags/Design-Pattern/index.html","hash":"a73037aa327a229ab6f568d6e75e20711ece2743","modified":1575013617307},{"_id":"public/tags/babel/index.html","hash":"c992f75b8f27a54f143832c6a1a6feb1f0509f1a","modified":1575013617307},{"_id":"public/tags/mobx/index.html","hash":"9367b36916dfc6edad2591de5809c5d6d2e35709","modified":1575013617307},{"_id":"public/tags/hexo/index.html","hash":"b6d512db10c06e83aa97829311ed2f2f398633f3","modified":1575013617307},{"_id":"public/tags/FP/index.html","hash":"411a260273a096be8abf74c7b7fdf732911053df","modified":1575013617307},{"_id":"public/tags/分享/index.html","hash":"a164a2c6721ccdc19f1f8dd234ea4f3de7832fd9","modified":1575013617307},{"_id":"public/2019/04/23/mobx初探/index.html","hash":"885f89fce66b5fe62c6f68348cb1f78ad2ca1922","modified":1575013617307},{"_id":"public/2019/03/24/React父组件和子组件解耦方案/index.html","hash":"932bb04f20a0c1932ea483854514d693224819ac","modified":1575013617307},{"_id":"public/2019/03/07/react中减少render臃肿的方法/index.html","hash":"9642cc4d69f06cff29686d7d4001cc43991da481","modified":1575013617307},{"_id":"public/2019/03/01/Create-react-app中使用装饰器语法/index.html","hash":"a901e0c31a0edc73e98d53c859bb4b570dcb823d","modified":1575013617307},{"_id":"public/tags/Mobx/index.html","hash":"d67d900b7165f8215ac9aa50df3f649c0109ac5c","modified":1575013617307},{"_id":"public/index.html","hash":"d9275c2e95ddcf3837bcdedee61e558f2837f0ff","modified":1575013617307},{"_id":"public/README.md","hash":"46e8a3fabcde1c4e5fb4c89e12855a7434bfd658","modified":1575013203947},{"_id":"public/CNAME","hash":"1132119aa5d0f85c68834c997880af95bf424ab9","modified":1575013203948},{"_id":"public/avator.jpg","hash":"2d5947eaf92f197b6059ee242a91f2503a7ec3ac","modified":1575013203948},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1575013203948},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1575013203948},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1575013203948},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1575013203948},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1575013203948},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1575013203948},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1575013203948},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1575013203948},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1575013203948},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1575013203948},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1575013203948},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1575013203948},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1575013203948},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1575013203948},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1575013203948},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1575013203948},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1575013203948},{"_id":"public/2019/03/01/Create-react-app中使用装饰器语法/1551331520473.png","hash":"941c49f3c4f7790310d4aa6ea05b99387978ef68","modified":1575013203948},{"_id":"public/2019/03/01/Create-react-app中使用装饰器语法/1551335060987.png","hash":"25ba4998d4154a48daccc6f7305948df46f1213a","modified":1575013203948},{"_id":"public/2019/04/23/mobx初探/1.png","hash":"1120364c7a9b7454307316c5c8233edbca83cf6b","modified":1575013203948},{"_id":"public/2019/04/23/mobx初探/10.png","hash":"9ddf6640777dbc1a64b1bc6cc51cc1ebb8354d7d","modified":1575013203949},{"_id":"public/2019/03/01/Create-react-app中使用装饰器语法/1551335316388.png","hash":"83ebee6639a33c23bd6d9f20ebc805adf2a7260e","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/11.png","hash":"a35ae482b68846c252179043e51589c7f2e0d41d","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/2.png","hash":"c1793dd0ae3d8d19589c744e6367344b8bb0b1e6","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/3.png","hash":"a85e4e2176be09a63a4ebf07b7b75311a36e3793","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/4.png","hash":"71fbb849b628c8b5233d7340d5bbbd24d12f8b85","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/5.png","hash":"d0b0b90337b4b00480332421e6a1ea2f2441abce","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/7.png","hash":"4323e4be2ee3b0a6faa6605a4439ab75d01a32fb","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/6.png","hash":"942b800cbbdc9afa5ffb1bf02924bbbe18fc8373","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/8.png","hash":"b8602c26ad1f1267d3cd7b209b07980938f44ff7","modified":1575013203949},{"_id":"public/2019/04/23/mobx初探/9.png","hash":"88edc35c3f7607ea0b5c5cb3983eb942d97ba4a1","modified":1575013203949},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1575013206012},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1575013206015},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1575013206018},{"_id":"public/js/next-boot.js","hash":"a6a82905c6abb8e0ec418ef6b0509b946b955807","modified":1575013206018},{"_id":"public/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1575013206019},{"_id":"public/js/motion.js","hash":"71e5caff1d87b1b7256f61e6b318bedf495f9e75","modified":1575013206019},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1575013206019},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1575013206019},{"_id":"public/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1575013206019},{"_id":"public/css/main.css","hash":"2ba38a5c8d7d3dfc9856c4601021bd127c34875c","modified":1575013206019},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1575013206019},{"_id":"public/2019/04/23/mobx初探/13.png","hash":"2da7159a5dd6fd2db402d11005683d01bca73099","modified":1575013206019},{"_id":"public/js/utils.js","hash":"a2984bf0631756a904cd43f8e3a8f6fb15b9ceb5","modified":1575013206019},{"_id":"public/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1575013206019},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1575013206019},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1575013206210},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1575013206231},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1575013206358},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1575013206358},{"_id":"public/2019/04/23/mobx初探/12.png","hash":"411728071cc29e22baff4536ad222b8b04b53e4d","modified":1575013206577}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2019-02-24T12:48:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-02-24 20:48:00\ntype: 'tags'\n---\n","updated":"2019-11-09T03:09:26.478Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck3ju70dn0001qgtr7mmoy75g","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"React父组件和子组件解耦方案","date":"2019-03-24T14:01:12.000Z","_content":"\n## 背景\n\n业务中经常会遇到抽离组件的情况，那么父组件和子组件之间该怎么解耦呢？\n\n## 案例\n\n比如实现一个 List 组件：\n\n```jsx\nconst Item = ({ text }) => (<div>{text}</div>);\n\nclass List extends React.Component {\n  state = {\n    list: [1, 2, 3, 4]\n  };\n\n  render() {\n    return this.state.list.map(x => <Item text={x} />);\n  }\n}\n```\n\n### 思考\n\n我们封装父组件经常会直接用到这种方法，但是如果该父组件是一个公共组件，那么当我们在外部引用它时，它对于我们而言其实是一个黑盒。父组件和子组件通过 list 牢牢的耦和在了一起。\n\n<!--more-->\n\n## 解耦方案\n\n### 一、使用 render props\n\n```jsx\nclass List extends React.Component {\n  state = {\n    list: [1, 2, 3, 4]\n  };\n\n  render() {\n    return this.props.children(this.state.list);\n  }\n}\n\n-- jsx\n\n<List>\n  {(list) => list.map(x => <Item text={x} />)}\n</List>\n\n```\n\n可以看到，通过 render props 的设计实现了父组件和子组件之间的解耦。\n\n### 二、Compound Component\n\n```jsx\nclass List extends React.Component {\n  state = {\n    list: [1, 2, 3, 4]\n  };\n\n  render() {\n    return (\n      React.Children.map(\n        this.props.children,\n        (child, i) => React.cloneElement(child, {\n          text: state.list[i]\n        })\n      );\n    )\n  }\n}\n\n--jsx\n\n<List>\n  <Item />\n  <Item />\n  <Item />\n  <Item />\n</List>\n```\n\n可以看到 compound component 也能实现父子组件解耦，只是在这里可能不是那么完美。其实 compound component 的应用远不止如此，读者可以自行挖掘。😃\n\n## 总结\n\ncompound component 和 render props 均实现了父子组件的解耦，并且父组件对于使用者来说也不再是一个黑盒。\n\n### 引申\n\n将父子组件解耦后，父子组件之间只需要接口达成一致便能完成使用。此时若将单元测试覆盖于测试用例，具体又有什么便利之处呢？👾\n","source":"_posts/React父组件和子组件解耦方案.md","raw":"---\ntitle: React父组件和子组件解耦方案\ndate: 2019-03-24 22:01:12\ntags:\n  - React\n  - Design Pattern\n---\n\n## 背景\n\n业务中经常会遇到抽离组件的情况，那么父组件和子组件之间该怎么解耦呢？\n\n## 案例\n\n比如实现一个 List 组件：\n\n```jsx\nconst Item = ({ text }) => (<div>{text}</div>);\n\nclass List extends React.Component {\n  state = {\n    list: [1, 2, 3, 4]\n  };\n\n  render() {\n    return this.state.list.map(x => <Item text={x} />);\n  }\n}\n```\n\n### 思考\n\n我们封装父组件经常会直接用到这种方法，但是如果该父组件是一个公共组件，那么当我们在外部引用它时，它对于我们而言其实是一个黑盒。父组件和子组件通过 list 牢牢的耦和在了一起。\n\n<!--more-->\n\n## 解耦方案\n\n### 一、使用 render props\n\n```jsx\nclass List extends React.Component {\n  state = {\n    list: [1, 2, 3, 4]\n  };\n\n  render() {\n    return this.props.children(this.state.list);\n  }\n}\n\n-- jsx\n\n<List>\n  {(list) => list.map(x => <Item text={x} />)}\n</List>\n\n```\n\n可以看到，通过 render props 的设计实现了父组件和子组件之间的解耦。\n\n### 二、Compound Component\n\n```jsx\nclass List extends React.Component {\n  state = {\n    list: [1, 2, 3, 4]\n  };\n\n  render() {\n    return (\n      React.Children.map(\n        this.props.children,\n        (child, i) => React.cloneElement(child, {\n          text: state.list[i]\n        })\n      );\n    )\n  }\n}\n\n--jsx\n\n<List>\n  <Item />\n  <Item />\n  <Item />\n  <Item />\n</List>\n```\n\n可以看到 compound component 也能实现父子组件解耦，只是在这里可能不是那么完美。其实 compound component 的应用远不止如此，读者可以自行挖掘。😃\n\n## 总结\n\ncompound component 和 render props 均实现了父子组件的解耦，并且父组件对于使用者来说也不再是一个黑盒。\n\n### 引申\n\n将父子组件解耦后，父子组件之间只需要接口达成一致便能完成使用。此时若将单元测试覆盖于测试用例，具体又有什么便利之处呢？👾\n","slug":"React父组件和子组件解耦方案","published":1,"updated":"2019-11-09T03:09:26.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ju70dg0000qgtrfg9e8kie","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>业务中经常会遇到抽离组件的情况，那么父组件和子组件之间该怎么解耦呢？</p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>比如实现一个 List 组件：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Item = <span class=\"function\">(<span class=\"params\">&#123; text &#125;</span>) =&gt;</span> (&lt;div&gt;&#123;text&#125;&lt;/div&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &lt;Item text=&#123;x&#125; /&gt;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>我们封装父组件经常会直接用到这种方法，但是如果该父组件是一个公共组件，那么当我们在外部引用它时，它对于我们而言其实是一个黑盒。父组件和子组件通过 list 牢牢的耦和在了一起。</p>\n<a id=\"more\"></a>\n<h2 id=\"解耦方案\"><a href=\"#解耦方案\" class=\"headerlink\" title=\"解耦方案\"></a>解耦方案</h2><h3 id=\"一、使用-render-props\"><a href=\"#一、使用-render-props\" class=\"headerlink\" title=\"一、使用 render props\"></a>一、使用 render props</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children(<span class=\"keyword\">this</span>.state.list);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-- jsx</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;List&gt;</span><br><span class=\"line\">  &#123;(list) =&gt; list.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &lt;Item text=&#123;x&#125; /&gt;)&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/List&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，通过 render props 的设计实现了父组件和子组件之间的解耦。</p>\n<h3 id=\"二、Compound-Component\"><a href=\"#二、Compound-Component\" class=\"headerlink\" title=\"二、Compound Component\"></a>二、Compound Component</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      React.Children.map(</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.children,</span><br><span class=\"line\">        (child, i) =&gt; React.cloneElement(child, &#123;</span><br><span class=\"line\">          text: state.list[i]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--jsx</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;List&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/List&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到 compound component 也能实现父子组件解耦，只是在这里可能不是那么完美。其实 compound component 的应用远不止如此，读者可以自行挖掘。😃</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>compound component 和 render props 均实现了父子组件的解耦，并且父组件对于使用者来说也不再是一个黑盒。</p>\n<h3 id=\"引申\"><a href=\"#引申\" class=\"headerlink\" title=\"引申\"></a>引申</h3><p>将父子组件解耦后，父子组件之间只需要接口达成一致便能完成使用。此时若将单元测试覆盖于测试用例，具体又有什么便利之处呢？👾</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>业务中经常会遇到抽离组件的情况，那么父组件和子组件之间该怎么解耦呢？</p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>比如实现一个 List 组件：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Item = <span class=\"function\">(<span class=\"params\">&#123; text &#125;</span>) =&gt;</span> (&lt;div&gt;&#123;text&#125;&lt;/div&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state.list.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &lt;Item text=&#123;x&#125; /&gt;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p>我们封装父组件经常会直接用到这种方法，但是如果该父组件是一个公共组件，那么当我们在外部引用它时，它对于我们而言其实是一个黑盒。父组件和子组件通过 list 牢牢的耦和在了一起。</p>","more":"<h2 id=\"解耦方案\"><a href=\"#解耦方案\" class=\"headerlink\" title=\"解耦方案\"></a>解耦方案</h2><h3 id=\"一、使用-render-props\"><a href=\"#一、使用-render-props\" class=\"headerlink\" title=\"一、使用 render props\"></a>一、使用 render props</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children(<span class=\"keyword\">this</span>.state.list);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-- jsx</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;List&gt;</span><br><span class=\"line\">  &#123;(list) =&gt; list.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> &lt;Item text=&#123;x&#125; /&gt;)&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/List&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，通过 render props 的设计实现了父组件和子组件之间的解耦。</p>\n<h3 id=\"二、Compound-Component\"><a href=\"#二、Compound-Component\" class=\"headerlink\" title=\"二、Compound Component\"></a>二、Compound Component</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">List</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      React.Children.map(</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.children,</span><br><span class=\"line\">        (child, i) =&gt; React.cloneElement(child, &#123;</span><br><span class=\"line\">          text: state.list[i]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">--jsx</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;List&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">  &lt;Item /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/List&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到 compound component 也能实现父子组件解耦，只是在这里可能不是那么完美。其实 compound component 的应用远不止如此，读者可以自行挖掘。😃</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>compound component 和 render props 均实现了父子组件的解耦，并且父组件对于使用者来说也不再是一个黑盒。</p>\n<h3 id=\"引申\"><a href=\"#引申\" class=\"headerlink\" title=\"引申\"></a>引申</h3><p>将父子组件解耦后，父子组件之间只需要接口达成一致便能完成使用。此时若将单元测试覆盖于测试用例，具体又有什么便利之处呢？👾</p>"},{"title":"Create-react-app中使用装饰器语法","date":"2019-02-28T18:29:45.000Z","_content":"\n### 背景：\n\n想要在 create-react-app 中使用 mobx，因为装饰器模式看起来简单，所以想让 create-react-app 支持装饰器语法。\n### 项目搭建\n\n```shell\ncreate-react-app test-decorator\nnpm install -s mobx-react mobx\n```\n\n安装完毕后，若直接在 class 中使用 mobx 的@observer 语法\n\n```jsx\nimport {@observer} from 'mobx-react';\n@observer\nclass Demo\n```\n\n此时会报编译错误\n<!--more-->\n\n![1551331520473](1551331520473.png)\n\n所以需要使用 babel 让编译时能支持装饰器语法。\n\n> ps：create-react-app 可以使用其他方式支持装饰器语法，这里只提供一种简单粗暴的形式-弹出。\n\n### 弹出 create-react-app 的项目\n\n```shell\nnpm run eject\n```\n\n发现出了点小意外:\n\nmobx 不应该先装，`eject得在工作区没有改动时启用，不然会弹出失败。`\n\n于是先提交工作区的改动\n\n```shell\ngit commit -a -m \"init\"\n```\n\n然后再次 eject\n\n### 安装`@babel/plugin-proposal-decorators`\n\n```shell\nnpm install --save-dev @babel/plugin-proposal-decorators\n```\n\n在`package.json`中加上\n\n```js\n{\n  \"plugins\": [\"@babel/plugin-proposal-decorators\"]\n}\n```\n\n此时运行报错\n\n![1551335060987](1551335060987.png)\n\n加上`decoratorsBeforeExport`：\n\n```json\n[\"@babel/plugin-proposal-decorators\", { \"decoratorsBeforeExport\": true }],\n```\n\n报错：\n\n![1551335316388](1551335316388.png)\n\n改成\n\n```json\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }]\n  ]\n}\n```\n\n成功!!!\n\n猜测和我的下面的写法有关，装饰器挂在头部怪怪的\n\n```\n@a\nclass B\n```\n\n好像大佬们认为下面这样更好一点\n\n```js\nexport @a class B\n```\n","source":"_posts/Create-react-app中使用装饰器语法.md","raw":"---\ntitle: Create-react-app中使用装饰器语法\ndate: 2019-03-01 02:29:45\ntags:\n  - React\n  - babel\n  - mobx\n---\n\n### 背景：\n\n想要在 create-react-app 中使用 mobx，因为装饰器模式看起来简单，所以想让 create-react-app 支持装饰器语法。\n### 项目搭建\n\n```shell\ncreate-react-app test-decorator\nnpm install -s mobx-react mobx\n```\n\n安装完毕后，若直接在 class 中使用 mobx 的@observer 语法\n\n```jsx\nimport {@observer} from 'mobx-react';\n@observer\nclass Demo\n```\n\n此时会报编译错误\n<!--more-->\n\n![1551331520473](1551331520473.png)\n\n所以需要使用 babel 让编译时能支持装饰器语法。\n\n> ps：create-react-app 可以使用其他方式支持装饰器语法，这里只提供一种简单粗暴的形式-弹出。\n\n### 弹出 create-react-app 的项目\n\n```shell\nnpm run eject\n```\n\n发现出了点小意外:\n\nmobx 不应该先装，`eject得在工作区没有改动时启用，不然会弹出失败。`\n\n于是先提交工作区的改动\n\n```shell\ngit commit -a -m \"init\"\n```\n\n然后再次 eject\n\n### 安装`@babel/plugin-proposal-decorators`\n\n```shell\nnpm install --save-dev @babel/plugin-proposal-decorators\n```\n\n在`package.json`中加上\n\n```js\n{\n  \"plugins\": [\"@babel/plugin-proposal-decorators\"]\n}\n```\n\n此时运行报错\n\n![1551335060987](1551335060987.png)\n\n加上`decoratorsBeforeExport`：\n\n```json\n[\"@babel/plugin-proposal-decorators\", { \"decoratorsBeforeExport\": true }],\n```\n\n报错：\n\n![1551335316388](1551335316388.png)\n\n改成\n\n```json\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"legacy\": true }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }]\n  ]\n}\n```\n\n成功!!!\n\n猜测和我的下面的写法有关，装饰器挂在头部怪怪的\n\n```\n@a\nclass B\n```\n\n好像大佬们认为下面这样更好一点\n\n```js\nexport @a class B\n```\n","slug":"Create-react-app中使用装饰器语法","published":1,"updated":"2019-11-09T03:09:26.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ju70dp0002qgtriqqh1hu3","content":"<h3 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h3><p>想要在 create-react-app 中使用 mobx，因为装饰器模式看起来简单，所以想让 create-react-app 支持装饰器语法。</p>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app test-decorator</span><br><span class=\"line\">npm install -s mobx-react mobx</span><br></pre></td></tr></table></figure>\n<p>安装完毕后，若直接在 class 中使用 mobx 的@observer 语法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;@observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span>;</span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span></span><br></pre></td></tr></table></figure>\n<p>此时会报编译错误<br><a id=\"more\"></a></p>\n<p><img src=\"/2019/03/01/Create-react-app中使用装饰器语法/1551331520473.png\" alt=\"1551331520473\"></p>\n<p>所以需要使用 babel 让编译时能支持装饰器语法。</p>\n<blockquote>\n<p>ps：create-react-app 可以使用其他方式支持装饰器语法，这里只提供一种简单粗暴的形式-弹出。</p>\n</blockquote>\n<h3 id=\"弹出-create-react-app-的项目\"><a href=\"#弹出-create-react-app-的项目\" class=\"headerlink\" title=\"弹出 create-react-app 的项目\"></a>弹出 create-react-app 的项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<p>发现出了点小意外:</p>\n<p>mobx 不应该先装，<code>eject得在工作区没有改动时启用，不然会弹出失败。</code></p>\n<p>于是先提交工作区的改动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a -m \"init\"</span><br></pre></td></tr></table></figure>\n<p>然后再次 eject</p>\n<h3 id=\"安装-babel-plugin-proposal-decorators\"><a href=\"#安装-babel-plugin-proposal-decorators\" class=\"headerlink\" title=\"安装@babel/plugin-proposal-decorators\"></a>安装<code>@babel/plugin-proposal-decorators</code></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @babel/plugin-proposal-decorators</span><br></pre></td></tr></table></figure>\n<p>在<code>package.json</code>中加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时运行报错</p>\n<p><img src=\"/2019/03/01/Create-react-app中使用装饰器语法/1551335060987.png\" alt=\"1551335060987\"></p>\n<p>加上<code>decoratorsBeforeExport</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[\"@babel/plugin-proposal-decorators\", &#123; \"decoratorsBeforeExport\": true &#125;],</span><br></pre></td></tr></table></figure>\n<p>报错：</p>\n<p><img src=\"/2019/03/01/Create-react-app中使用装饰器语法/1551335316388.png\" alt=\"1551335316388\"></p>\n<p>改成</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>, &#123; <span class=\"attr\">\"legacy\"</span>: <span class=\"literal\">true</span> &#125;],</span><br><span class=\"line\">    [<span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span>, &#123; <span class=\"attr\">\"loose\"</span>: <span class=\"literal\">true</span> &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>成功!!!</p>\n<p>猜测和我的下面的写法有关，装饰器挂在头部怪怪的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@a</span><br><span class=\"line\">class B</span><br></pre></td></tr></table></figure>\n<p>好像大佬们认为下面这样更好一点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> @a <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h3><p>想要在 create-react-app 中使用 mobx，因为装饰器模式看起来简单，所以想让 create-react-app 支持装饰器语法。</p>\n<h3 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app test-decorator</span><br><span class=\"line\">npm install -s mobx-react mobx</span><br></pre></td></tr></table></figure>\n<p>安装完毕后，若直接在 class 中使用 mobx 的@observer 语法</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;@observer&#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx-react'</span>;</span><br><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span></span></span><br></pre></td></tr></table></figure>\n<p>此时会报编译错误<br></p>","more":"<p></p>\n<p><img src=\"/2019/03/01/Create-react-app中使用装饰器语法/1551331520473.png\" alt=\"1551331520473\"></p>\n<p>所以需要使用 babel 让编译时能支持装饰器语法。</p>\n<blockquote>\n<p>ps：create-react-app 可以使用其他方式支持装饰器语法，这里只提供一种简单粗暴的形式-弹出。</p>\n</blockquote>\n<h3 id=\"弹出-create-react-app-的项目\"><a href=\"#弹出-create-react-app-的项目\" class=\"headerlink\" title=\"弹出 create-react-app 的项目\"></a>弹出 create-react-app 的项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run eject</span><br></pre></td></tr></table></figure>\n<p>发现出了点小意外:</p>\n<p>mobx 不应该先装，<code>eject得在工作区没有改动时启用，不然会弹出失败。</code></p>\n<p>于是先提交工作区的改动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a -m \"init\"</span><br></pre></td></tr></table></figure>\n<p>然后再次 eject</p>\n<h3 id=\"安装-babel-plugin-proposal-decorators\"><a href=\"#安装-babel-plugin-proposal-decorators\" class=\"headerlink\" title=\"安装@babel/plugin-proposal-decorators\"></a>安装<code>@babel/plugin-proposal-decorators</code></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @babel/plugin-proposal-decorators</span><br></pre></td></tr></table></figure>\n<p>在<code>package.json</code>中加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时运行报错</p>\n<p><img src=\"/2019/03/01/Create-react-app中使用装饰器语法/1551335060987.png\" alt=\"1551335060987\"></p>\n<p>加上<code>decoratorsBeforeExport</code>：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[\"@babel/plugin-proposal-decorators\", &#123; \"decoratorsBeforeExport\": true &#125;],</span><br></pre></td></tr></table></figure>\n<p>报错：</p>\n<p><img src=\"/2019/03/01/Create-react-app中使用装饰器语法/1551335316388.png\" alt=\"1551335316388\"></p>\n<p>改成</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>, &#123; <span class=\"attr\">\"legacy\"</span>: <span class=\"literal\">true</span> &#125;],</span><br><span class=\"line\">    [<span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span>, &#123; <span class=\"attr\">\"loose\"</span>: <span class=\"literal\">true</span> &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>成功!!!</p>\n<p>猜测和我的下面的写法有关，装饰器挂在头部怪怪的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@a</span><br><span class=\"line\">class B</span><br></pre></td></tr></table></figure>\n<p>好像大佬们认为下面这样更好一点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> @a <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span></span><br></pre></td></tr></table></figure>"},{"title":"hexo发布文章流程记录","date":"2018-11-09T02:19:27.000Z","_content":"\n新建文章\n\n```shell\nhexo new post \"title\"\n```\n\n生成静态网页\n\n```shell\nhexo g\n```\n\n本地预览\n\n```shell\nhexo s\n```\n\n同步至 github 服务器\n\n```shell\nhexo d\n```\n","source":"_posts/hexo发布文章流程记录.md","raw":"---\ntitle: hexo发布文章流程记录\ndate: 2018-11-09 10:19:27\ntags:\n  - hexo\n---\n\n新建文章\n\n```shell\nhexo new post \"title\"\n```\n\n生成静态网页\n\n```shell\nhexo g\n```\n\n本地预览\n\n```shell\nhexo s\n```\n\n同步至 github 服务器\n\n```shell\nhexo d\n```\n","slug":"hexo发布文章流程记录","published":1,"updated":"2019-11-09T03:09:26.409Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ju70dx0004qgtrjrct52t7","content":"<p>新建文章</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post \"title\"</span><br></pre></td></tr></table></figure>\n<p>生成静态网页</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>本地预览</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>同步至 github 服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>新建文章</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post \"title\"</span><br></pre></td></tr></table></figure>\n<p>生成静态网页</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<p>本地预览</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>同步至 github 服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n"},{"title":"函数式编程系列（一）总览","date":"2019-03-10T13:05:45.000Z","_content":"\n# 函数式编程\n\n## 留坑待填～～\n\n### 背景\n\n写该专题主要是为了梳理自己学习函数式以来收获的知识，用于回顾。并且可以作为后期组内分享的素材。\n\n### 计划\n\n- [ ] 写一个常见的函数式的集合\n- [ ] 学习 Functional-Light JavaScript\n- [ ] 学习 Hardcore Functional Programming in JavaScript\n- [ ] 学习使用 Ramda\n- [ ] 学习 Haskell\n","source":"_posts/函数式编程系列（一）总览.md","raw":"---\ntitle: 函数式编程系列（一）总览\ndate: 2019-03-10 21:05:45\ntags:\n  - FP\n  - 分享\n---\n\n# 函数式编程\n\n## 留坑待填～～\n\n### 背景\n\n写该专题主要是为了梳理自己学习函数式以来收获的知识，用于回顾。并且可以作为后期组内分享的素材。\n\n### 计划\n\n- [ ] 写一个常见的函数式的集合\n- [ ] 学习 Functional-Light JavaScript\n- [ ] 学习 Hardcore Functional Programming in JavaScript\n- [ ] 学习使用 Ramda\n- [ ] 学习 Haskell\n","slug":"函数式编程系列（一）总览","published":1,"updated":"2019-11-09T03:09:26.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ju70dz0005qgtr9ben5eay","content":"<h1 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h1><h2 id=\"留坑待填～～\"><a href=\"#留坑待填～～\" class=\"headerlink\" title=\"留坑待填～～\"></a>留坑待填～～</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>写该专题主要是为了梳理自己学习函数式以来收获的知识，用于回顾。并且可以作为后期组内分享的素材。</p>\n<h3 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 写一个常见的函数式的集合</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习 Functional-Light JavaScript</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习 Hardcore Functional Programming in JavaScript</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习使用 Ramda</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习 Haskell</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h1><h2 id=\"留坑待填～～\"><a href=\"#留坑待填～～\" class=\"headerlink\" title=\"留坑待填～～\"></a>留坑待填～～</h2><h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>写该专题主要是为了梳理自己学习函数式以来收获的知识，用于回顾。并且可以作为后期组内分享的素材。</p>\n<h3 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h3><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 写一个常见的函数式的集合</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习 Functional-Light JavaScript</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习 Hardcore Functional Programming in JavaScript</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习使用 Ramda</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习 Haskell</li>\n</ul>\n"},{"title":"react中减少render臃肿的方法","date":"2019-03-07T15:25:07.000Z","_content":"\n最近看了mobx的相关知识，对computed属性十分喜欢。\n\n想起在日常的项目开发中，react经常需要在render函数的开始部分进行一些props属性的计算，再将计算值用于渲染。一般会有以下画面：\n\n```js\nclass User extends Component {\n  render() {\n    const { firstName, secondName } = this.props;\n    const fullName = firstName + secondName;\n    return <div>{fullName}</div>\n  }\n}\n```\n<!--more-->\n当业务逻辑复杂时可能会造成render函数十分的臃肿。也许我们会进行这样的优化：\n\n```js\nclass User extends Component {\n  getFullName = () => {\n    const { firstName, secondName } = this.props;\n    return firstName + secondName;\n  }\n  render() {\n    return <div>{this.getFullName()}</div>\n  }\n}\n```\n\n但是我们实质上寻求的是一种computed的属性，将其封装成函数只是一种曲线救国的手段。\n直到我在看frontend master的过程中，才发现原来可以使用class的get属性：\n\n```js\nclass User extends Component {\n  get fullName() {\n    const { firstName, secondName } = this.props;\n    return firstName + secondName;\n  }\n  render() {\n    return <div>{this.fullName}</div>\n  }\n}\n```\n\n### 总结：\n使用get属性实现computed的功能可以减少render函数的臃肿。","source":"_posts/react中减少render臃肿的方法.md","raw":"---\ntitle: react中减少render臃肿的方法\ndate: 2019-03-07 23:25:07\ntags:\n  - React\n---\n\n最近看了mobx的相关知识，对computed属性十分喜欢。\n\n想起在日常的项目开发中，react经常需要在render函数的开始部分进行一些props属性的计算，再将计算值用于渲染。一般会有以下画面：\n\n```js\nclass User extends Component {\n  render() {\n    const { firstName, secondName } = this.props;\n    const fullName = firstName + secondName;\n    return <div>{fullName}</div>\n  }\n}\n```\n<!--more-->\n当业务逻辑复杂时可能会造成render函数十分的臃肿。也许我们会进行这样的优化：\n\n```js\nclass User extends Component {\n  getFullName = () => {\n    const { firstName, secondName } = this.props;\n    return firstName + secondName;\n  }\n  render() {\n    return <div>{this.getFullName()}</div>\n  }\n}\n```\n\n但是我们实质上寻求的是一种computed的属性，将其封装成函数只是一种曲线救国的手段。\n直到我在看frontend master的过程中，才发现原来可以使用class的get属性：\n\n```js\nclass User extends Component {\n  get fullName() {\n    const { firstName, secondName } = this.props;\n    return firstName + secondName;\n  }\n  render() {\n    return <div>{this.fullName}</div>\n  }\n}\n```\n\n### 总结：\n使用get属性实现computed的功能可以减少render函数的臃肿。","slug":"react中减少render臃肿的方法","published":1,"updated":"2019-11-09T03:09:26.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ju70e10006qgtrgc83hsmo","content":"<p>最近看了mobx的相关知识，对computed属性十分喜欢。</p>\n<p>想起在日常的项目开发中，react经常需要在render函数的开始部分进行一些props属性的计算，再将计算值用于渲染。一般会有以下画面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; firstName, secondName &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fullName = firstName + secondName;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;fullName&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>当业务逻辑复杂时可能会造成render函数十分的臃肿。也许我们会进行这样的优化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  getFullName = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; firstName, secondName &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.getFullName()&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是我们实质上寻求的是一种computed的属性，将其封装成函数只是一种曲线救国的手段。<br>直到我在看frontend master的过程中，才发现原来可以使用class的get属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> fullName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; firstName, secondName &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.fullName&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>使用get属性实现computed的功能可以减少render函数的臃肿。</p>\n","site":{"data":{}},"excerpt":"<p>最近看了mobx的相关知识，对computed属性十分喜欢。</p>\n<p>想起在日常的项目开发中，react经常需要在render函数的开始部分进行一些props属性的计算，再将计算值用于渲染。一般会有以下画面：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; firstName, secondName &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fullName = firstName + secondName;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;fullName&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>当业务逻辑复杂时可能会造成render函数十分的臃肿。也许我们会进行这样的优化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  getFullName = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; firstName, secondName &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.getFullName()&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是我们实质上寻求的是一种computed的属性，将其封装成函数只是一种曲线救国的手段。<br>直到我在看frontend master的过程中，才发现原来可以使用class的get属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> fullName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; firstName, secondName &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.fullName&#125;&lt;/div&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>使用get属性实现computed的功能可以减少render函数的臃肿。</p>"},{"title":"mobx初探","date":"2019-04-22T16:39:08.000Z","_content":"\n## 一、前言\n\n本文是笔者在看了 frontendmaster 的状态管理课程之后，对 mobx 进行的初步学习的总结。\n\n## 二、Mobx 简介\n\nmobx 是社区内使用的较为常见的一种状态管理库，mobx 官网称其\n\n> 通过透明的函数响应式编程(transparently applying functional reactive programming - TFRP)使得状态管理变得简单和可扩展\n\nmobx 主要有以下几个核心特性：\n\n- Observable State（可观察状态）\n- Computed Values（计算属性）\n- Reactions（反应，完成页面渲染、日志打印）\n- Actions（动作）\n\n以下介绍将结合部分 mobx 代码，代码地址： [示例代码](https://jsbin.com/demelo/19/edit?html,js,console,output)\n\n<!--more-->\n\n详细代码如下:\n\n```js\n// html\n<div id=\"console\" />;\n\n// js\nconst { computed, observable, autorun } = mobx;\n\nclass Person {\n  @observable firstName;\n  @observable secondName;\n\n  constructor(firstName, secondName) {\n    this.firstName = firstName;\n    this.secondName = secondName;\n  }\n\n  @computed get fullName() {\n    return this.firstName + ' ' + this.secondName;\n  }\n}\n\nconst wdz = new Person('Demian', 'Wang');\nconst greet = observable.box('good morning! ');\n\nconst render = () => {\n  document.getElementById('console').innerText = greet + wdz.fullName;\n};\n// 动态更新dom内容\nautorun(render);\n```\n\n此时网页 ui 为：\n\n![1](1.png)\n\n### 1.Computed Values\n\n首先介绍一下计算属性。在上述代码中 fullName 就是计算属性。相信用过 vue 的对这个很熟悉。当我们在命令行手动修改 wdz 的 firstName 时，wdz 的 fullName 会自动更新\n\n![2](2.png)\n\n此时网页 ui 也发生了实时的变化：\n\n![3](3.png)\n\n可见，computed 属性可以响应 observable 属性的变化。\n\n值得一提的是，在 react 的 render 函数中，如果存在很多 props 的计算的话，可以使用 get 语法的形式将这部分逻辑抽离：\n\n```jsx\nget fullName() {\n  return this.props.firstName + this.props.secondName;\n}\nrender() {\n  return <div>{this.fullName}</div>\n}\n```\n\n这里的 fullName 和可计算属性类似，依据传入的 props 属性动态变化。\n\n### 2.Observable State\n\n通过在类属性前加上@observable，为该属性添加了可观察功能。\n\n```js\nimport { observable } from 'mobx';\nclass Person {\n  @observable firstName;\n\n  constructor(firstName) {\n    this.firstName = firstName;\n  }\n}\n```\n\n使用装饰器语法很简洁的使得 name 拥有了可观察的功能。\n\n那么 Observable 有什么作用呢？\n\n见以下代码：\n\n```js\nconst greet = observable.box('good morning! ');\n```\n\n我们为 greet 返回一个 observable 包装过的值，首先我们试着直接改变 greet 的值\n\n![4](4.png)\n\n但是，此时网页 ui 没有实时变化：\n\n![5](5.png)\n\n可见，原始类型在包装过之后，**直接改变引用值不能触发页面动态更新**，感兴趣的读者可以点击上面的链接打印出 greet 的属性，就能很直观的认识到 observable 的作用。\n\n以下是简化版的 observable：\n\n```js\n// 简单的observable\nconst observable = value => {\n  return {\n    value,\n    get() {\n      console.log('get', this.value);\n      return this.value;\n    },\n    set(newValue) {\n      console.log('set', newValue);\n      // 向全局通知该数据更新\n      report(this.value, newValue);\n      this.value = newValue;\n    }\n  };\n};\n\n// reactive代码\neventEmitter.on('report', (oldValue, newValue) => {\n  console.log(oldValue, '===>', newValue);\n});\n\n// 通知给全局\nconst report = (oldValue, newValue) => {\n  eventEmitter.emit('report', oldValue, newValue);\n};\n```\n\n主要是使用 value 值存储原始类型，使用 get 获取 value 值，使用 set 更新 value 值。值得注意的是，在更新数据以前，set 方法会根据一定的配置，选择是否向全局发送更新事件，相应的一些 computed 的属性会接收到该事件。\n\n### 3.Reactions\n\n```js\nconst render = () => {\n  document.getElementById('console').innerText = greet + wdz.fullName;\n};\n// 动态更新dom内容\nautorun(render);\n```\n\n当 observable 数据变化后，页面会自动更新 ui。\n\n## 三、mobx 实战-实现一个 todoList\n\n注：由于 create-react-app 创建的项目默认不能使用装饰器语法，所以笔者暴力的 eject 并安装了相应的 babel 配置。\n\n以下是 todoList 的项目结构：\n\n![6](6.png)\n\n最终实现效果：\n\n![7](7.png)\n\n项目地址：[todolist](https://github.com/Demian1996/todo/tree/mobx-todo)\n\n当我们使用 mobx 维护状态时，store 不像 redux 那样是全局唯一的，我们可以细粒度地维护一个个数据模型。在中小型的项目中，mobx 的 store 轻便简洁，使用起来很顺滑。\n\n项目中用到的 mobx 特性：\n\n### 1.observable\n\n主要维护 todolist 的基本状态：待办列表 todolist、新建待办的内容 itemContent 和当前筛选类型 filterType\n\n![8](8.png)\n\n### 2.computed\n\n根据当前筛选器的类型，返回对应的 todoList。\n\n![9](9.png)\n\n### 3.reactions\n\n筛选器状态变化后，响应式地打印出当前筛选器的状态。\n\n![10](10.png)\n\n### 4.actions\n\n点击筛选器后的状态切换和异步事件。这里需要使用 runInAction 包装异步函数，这样才可以完成响应式的更新数据。\n\n![11](11.png)\n\n## 四、Mobx vs Redux\n\n两者都是优秀的状态管理工具，都可以帮助开发者完成业务开发。所以抛开业务场景谈论工具优劣是无意义的，笔者这里只是简单列出两者的区别。\n\n### 修改数据\n\n![12](12.png)\n\n### 中间件\n\n![13](13.png)\n\n## 五、总结\n\n笔者只是介绍了 mobx 的冰山一角，其作为一种响应式的状态管理库，在中小型项目中有着高效率的表现。响应式的写法、细粒度的 store 管理都体现了 mobx 的灵活性。\n","source":"_posts/mobx初探.md","raw":"---\ntitle: mobx初探\ndate: 2019-04-23 00:39:08\ntags:\n  - React\n  - Mobx\n---\n\n## 一、前言\n\n本文是笔者在看了 frontendmaster 的状态管理课程之后，对 mobx 进行的初步学习的总结。\n\n## 二、Mobx 简介\n\nmobx 是社区内使用的较为常见的一种状态管理库，mobx 官网称其\n\n> 通过透明的函数响应式编程(transparently applying functional reactive programming - TFRP)使得状态管理变得简单和可扩展\n\nmobx 主要有以下几个核心特性：\n\n- Observable State（可观察状态）\n- Computed Values（计算属性）\n- Reactions（反应，完成页面渲染、日志打印）\n- Actions（动作）\n\n以下介绍将结合部分 mobx 代码，代码地址： [示例代码](https://jsbin.com/demelo/19/edit?html,js,console,output)\n\n<!--more-->\n\n详细代码如下:\n\n```js\n// html\n<div id=\"console\" />;\n\n// js\nconst { computed, observable, autorun } = mobx;\n\nclass Person {\n  @observable firstName;\n  @observable secondName;\n\n  constructor(firstName, secondName) {\n    this.firstName = firstName;\n    this.secondName = secondName;\n  }\n\n  @computed get fullName() {\n    return this.firstName + ' ' + this.secondName;\n  }\n}\n\nconst wdz = new Person('Demian', 'Wang');\nconst greet = observable.box('good morning! ');\n\nconst render = () => {\n  document.getElementById('console').innerText = greet + wdz.fullName;\n};\n// 动态更新dom内容\nautorun(render);\n```\n\n此时网页 ui 为：\n\n![1](1.png)\n\n### 1.Computed Values\n\n首先介绍一下计算属性。在上述代码中 fullName 就是计算属性。相信用过 vue 的对这个很熟悉。当我们在命令行手动修改 wdz 的 firstName 时，wdz 的 fullName 会自动更新\n\n![2](2.png)\n\n此时网页 ui 也发生了实时的变化：\n\n![3](3.png)\n\n可见，computed 属性可以响应 observable 属性的变化。\n\n值得一提的是，在 react 的 render 函数中，如果存在很多 props 的计算的话，可以使用 get 语法的形式将这部分逻辑抽离：\n\n```jsx\nget fullName() {\n  return this.props.firstName + this.props.secondName;\n}\nrender() {\n  return <div>{this.fullName}</div>\n}\n```\n\n这里的 fullName 和可计算属性类似，依据传入的 props 属性动态变化。\n\n### 2.Observable State\n\n通过在类属性前加上@observable，为该属性添加了可观察功能。\n\n```js\nimport { observable } from 'mobx';\nclass Person {\n  @observable firstName;\n\n  constructor(firstName) {\n    this.firstName = firstName;\n  }\n}\n```\n\n使用装饰器语法很简洁的使得 name 拥有了可观察的功能。\n\n那么 Observable 有什么作用呢？\n\n见以下代码：\n\n```js\nconst greet = observable.box('good morning! ');\n```\n\n我们为 greet 返回一个 observable 包装过的值，首先我们试着直接改变 greet 的值\n\n![4](4.png)\n\n但是，此时网页 ui 没有实时变化：\n\n![5](5.png)\n\n可见，原始类型在包装过之后，**直接改变引用值不能触发页面动态更新**，感兴趣的读者可以点击上面的链接打印出 greet 的属性，就能很直观的认识到 observable 的作用。\n\n以下是简化版的 observable：\n\n```js\n// 简单的observable\nconst observable = value => {\n  return {\n    value,\n    get() {\n      console.log('get', this.value);\n      return this.value;\n    },\n    set(newValue) {\n      console.log('set', newValue);\n      // 向全局通知该数据更新\n      report(this.value, newValue);\n      this.value = newValue;\n    }\n  };\n};\n\n// reactive代码\neventEmitter.on('report', (oldValue, newValue) => {\n  console.log(oldValue, '===>', newValue);\n});\n\n// 通知给全局\nconst report = (oldValue, newValue) => {\n  eventEmitter.emit('report', oldValue, newValue);\n};\n```\n\n主要是使用 value 值存储原始类型，使用 get 获取 value 值，使用 set 更新 value 值。值得注意的是，在更新数据以前，set 方法会根据一定的配置，选择是否向全局发送更新事件，相应的一些 computed 的属性会接收到该事件。\n\n### 3.Reactions\n\n```js\nconst render = () => {\n  document.getElementById('console').innerText = greet + wdz.fullName;\n};\n// 动态更新dom内容\nautorun(render);\n```\n\n当 observable 数据变化后，页面会自动更新 ui。\n\n## 三、mobx 实战-实现一个 todoList\n\n注：由于 create-react-app 创建的项目默认不能使用装饰器语法，所以笔者暴力的 eject 并安装了相应的 babel 配置。\n\n以下是 todoList 的项目结构：\n\n![6](6.png)\n\n最终实现效果：\n\n![7](7.png)\n\n项目地址：[todolist](https://github.com/Demian1996/todo/tree/mobx-todo)\n\n当我们使用 mobx 维护状态时，store 不像 redux 那样是全局唯一的，我们可以细粒度地维护一个个数据模型。在中小型的项目中，mobx 的 store 轻便简洁，使用起来很顺滑。\n\n项目中用到的 mobx 特性：\n\n### 1.observable\n\n主要维护 todolist 的基本状态：待办列表 todolist、新建待办的内容 itemContent 和当前筛选类型 filterType\n\n![8](8.png)\n\n### 2.computed\n\n根据当前筛选器的类型，返回对应的 todoList。\n\n![9](9.png)\n\n### 3.reactions\n\n筛选器状态变化后，响应式地打印出当前筛选器的状态。\n\n![10](10.png)\n\n### 4.actions\n\n点击筛选器后的状态切换和异步事件。这里需要使用 runInAction 包装异步函数，这样才可以完成响应式的更新数据。\n\n![11](11.png)\n\n## 四、Mobx vs Redux\n\n两者都是优秀的状态管理工具，都可以帮助开发者完成业务开发。所以抛开业务场景谈论工具优劣是无意义的，笔者这里只是简单列出两者的区别。\n\n### 修改数据\n\n![12](12.png)\n\n### 中间件\n\n![13](13.png)\n\n## 五、总结\n\n笔者只是介绍了 mobx 的冰山一角，其作为一种响应式的状态管理库，在中小型项目中有着高效率的表现。响应式的写法、细粒度的 store 管理都体现了 mobx 的灵活性。\n","slug":"mobx初探","published":1,"updated":"2019-11-09T03:09:26.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3ju70e70008qgtr8o706h7e","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>本文是笔者在看了 frontendmaster 的状态管理课程之后，对 mobx 进行的初步学习的总结。</p>\n<h2 id=\"二、Mobx-简介\"><a href=\"#二、Mobx-简介\" class=\"headerlink\" title=\"二、Mobx 简介\"></a>二、Mobx 简介</h2><p>mobx 是社区内使用的较为常见的一种状态管理库，mobx 官网称其</p>\n<blockquote>\n<p>通过透明的函数响应式编程(transparently applying functional reactive programming - TFRP)使得状态管理变得简单和可扩展</p>\n</blockquote>\n<p>mobx 主要有以下几个核心特性：</p>\n<ul>\n<li>Observable State（可观察状态）</li>\n<li>Computed Values（计算属性）</li>\n<li>Reactions（反应，完成页面渲染、日志打印）</li>\n<li>Actions（动作）</li>\n</ul>\n<p>以下介绍将结合部分 mobx 代码，代码地址： <a href=\"https://jsbin.com/demelo/19/edit?html,js,console,output\" target=\"_blank\" rel=\"noopener\">示例代码</a></p>\n<a id=\"more\"></a>\n<p>详细代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"console\"</span> /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; computed, observable, autorun &#125; = mobx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @observable firstName;</span><br><span class=\"line\">  @observable secondName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(firstName, secondName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.secondName = secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> fullName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wdz = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Demian'</span>, <span class=\"string\">'Wang'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> greet = observable.box(<span class=\"string\">'good morning! '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'console'</span>).innerText = greet + wdz.fullName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 动态更新dom内容</span></span><br><span class=\"line\">autorun(render);</span><br></pre></td></tr></table></figure>\n<p>此时网页 ui 为：</p>\n<p><img src=\"/2019/04/23/mobx初探/1.png\" alt=\"1\"></p>\n<h3 id=\"1-Computed-Values\"><a href=\"#1-Computed-Values\" class=\"headerlink\" title=\"1.Computed Values\"></a>1.Computed Values</h3><p>首先介绍一下计算属性。在上述代码中 fullName 就是计算属性。相信用过 vue 的对这个很熟悉。当我们在命令行手动修改 wdz 的 firstName 时，wdz 的 fullName 会自动更新</p>\n<p><img src=\"/2019/04/23/mobx初探/2.png\" alt=\"2\"></p>\n<p>此时网页 ui 也发生了实时的变化：</p>\n<p><img src=\"/2019/04/23/mobx初探/3.png\" alt=\"3\"></p>\n<p>可见，computed 属性可以响应 observable 属性的变化。</p>\n<p>值得一提的是，在 react 的 render 函数中，如果存在很多 props 的计算的话，可以使用 get 语法的形式将这部分逻辑抽离：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> fullName() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.firstName + <span class=\"keyword\">this</span>.props.secondName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.fullName&#125;&lt;/div&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 fullName 和可计算属性类似，依据传入的 props 属性动态变化。</p>\n<h3 id=\"2-Observable-State\"><a href=\"#2-Observable-State\" class=\"headerlink\" title=\"2.Observable State\"></a>2.Observable State</h3><p>通过在类属性前加上@observable，为该属性添加了可观察功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @observable firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(firstName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用装饰器语法很简洁的使得 name 拥有了可观察的功能。</p>\n<p>那么 Observable 有什么作用呢？</p>\n<p>见以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greet = observable.box(<span class=\"string\">'good morning! '</span>);</span><br></pre></td></tr></table></figure>\n<p>我们为 greet 返回一个 observable 包装过的值，首先我们试着直接改变 greet 的值</p>\n<p><img src=\"/2019/04/23/mobx初探/4.png\" alt=\"4\"></p>\n<p>但是，此时网页 ui 没有实时变化：</p>\n<p><img src=\"/2019/04/23/mobx初探/5.png\" alt=\"5\"></p>\n<p>可见，原始类型在包装过之后，<strong>直接改变引用值不能触发页面动态更新</strong>，感兴趣的读者可以点击上面的链接打印出 greet 的属性，就能很直观的认识到 observable 的作用。</p>\n<p>以下是简化版的 observable：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    value,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, <span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newValue) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'set'</span>, newValue);</span><br><span class=\"line\">      <span class=\"comment\">// 向全局通知该数据更新</span></span><br><span class=\"line\">      report(<span class=\"keyword\">this</span>.value, newValue);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reactive代码</span></span><br><span class=\"line\">eventEmitter.on(<span class=\"string\">'report'</span>, (oldValue, newValue) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(oldValue, <span class=\"string\">'===&gt;'</span>, newValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通知给全局</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> report = <span class=\"function\">(<span class=\"params\">oldValue, newValue</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  eventEmitter.emit(<span class=\"string\">'report'</span>, oldValue, newValue);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>主要是使用 value 值存储原始类型，使用 get 获取 value 值，使用 set 更新 value 值。值得注意的是，在更新数据以前，set 方法会根据一定的配置，选择是否向全局发送更新事件，相应的一些 computed 的属性会接收到该事件。</p>\n<h3 id=\"3-Reactions\"><a href=\"#3-Reactions\" class=\"headerlink\" title=\"3.Reactions\"></a>3.Reactions</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'console'</span>).innerText = greet + wdz.fullName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 动态更新dom内容</span></span><br><span class=\"line\">autorun(render);</span><br></pre></td></tr></table></figure>\n<p>当 observable 数据变化后，页面会自动更新 ui。</p>\n<h2 id=\"三、mobx-实战-实现一个-todoList\"><a href=\"#三、mobx-实战-实现一个-todoList\" class=\"headerlink\" title=\"三、mobx 实战-实现一个 todoList\"></a>三、mobx 实战-实现一个 todoList</h2><p>注：由于 create-react-app 创建的项目默认不能使用装饰器语法，所以笔者暴力的 eject 并安装了相应的 babel 配置。</p>\n<p>以下是 todoList 的项目结构：</p>\n<p><img src=\"/2019/04/23/mobx初探/6.png\" alt=\"6\"></p>\n<p>最终实现效果：</p>\n<p><img src=\"/2019/04/23/mobx初探/7.png\" alt=\"7\"></p>\n<p>项目地址：<a href=\"https://github.com/Demian1996/todo/tree/mobx-todo\" target=\"_blank\" rel=\"noopener\">todolist</a></p>\n<p>当我们使用 mobx 维护状态时，store 不像 redux 那样是全局唯一的，我们可以细粒度地维护一个个数据模型。在中小型的项目中，mobx 的 store 轻便简洁，使用起来很顺滑。</p>\n<p>项目中用到的 mobx 特性：</p>\n<h3 id=\"1-observable\"><a href=\"#1-observable\" class=\"headerlink\" title=\"1.observable\"></a>1.observable</h3><p>主要维护 todolist 的基本状态：待办列表 todolist、新建待办的内容 itemContent 和当前筛选类型 filterType</p>\n<p><img src=\"/2019/04/23/mobx初探/8.png\" alt=\"8\"></p>\n<h3 id=\"2-computed\"><a href=\"#2-computed\" class=\"headerlink\" title=\"2.computed\"></a>2.computed</h3><p>根据当前筛选器的类型，返回对应的 todoList。</p>\n<p><img src=\"/2019/04/23/mobx初探/9.png\" alt=\"9\"></p>\n<h3 id=\"3-reactions\"><a href=\"#3-reactions\" class=\"headerlink\" title=\"3.reactions\"></a>3.reactions</h3><p>筛选器状态变化后，响应式地打印出当前筛选器的状态。</p>\n<p><img src=\"/2019/04/23/mobx初探/10.png\" alt=\"10\"></p>\n<h3 id=\"4-actions\"><a href=\"#4-actions\" class=\"headerlink\" title=\"4.actions\"></a>4.actions</h3><p>点击筛选器后的状态切换和异步事件。这里需要使用 runInAction 包装异步函数，这样才可以完成响应式的更新数据。</p>\n<p><img src=\"/2019/04/23/mobx初探/11.png\" alt=\"11\"></p>\n<h2 id=\"四、Mobx-vs-Redux\"><a href=\"#四、Mobx-vs-Redux\" class=\"headerlink\" title=\"四、Mobx vs Redux\"></a>四、Mobx vs Redux</h2><p>两者都是优秀的状态管理工具，都可以帮助开发者完成业务开发。所以抛开业务场景谈论工具优劣是无意义的，笔者这里只是简单列出两者的区别。</p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"/2019/04/23/mobx初探/12.png\" alt=\"12\"></p>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><p><img src=\"/2019/04/23/mobx初探/13.png\" alt=\"13\"></p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>笔者只是介绍了 mobx 的冰山一角，其作为一种响应式的状态管理库，在中小型项目中有着高效率的表现。响应式的写法、细粒度的 store 管理都体现了 mobx 的灵活性。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>本文是笔者在看了 frontendmaster 的状态管理课程之后，对 mobx 进行的初步学习的总结。</p>\n<h2 id=\"二、Mobx-简介\"><a href=\"#二、Mobx-简介\" class=\"headerlink\" title=\"二、Mobx 简介\"></a>二、Mobx 简介</h2><p>mobx 是社区内使用的较为常见的一种状态管理库，mobx 官网称其</p>\n<blockquote>\n<p>通过透明的函数响应式编程(transparently applying functional reactive programming - TFRP)使得状态管理变得简单和可扩展</p>\n</blockquote>\n<p>mobx 主要有以下几个核心特性：</p>\n<ul>\n<li>Observable State（可观察状态）</li>\n<li>Computed Values（计算属性）</li>\n<li>Reactions（反应，完成页面渲染、日志打印）</li>\n<li>Actions（动作）</li>\n</ul>\n<p>以下介绍将结合部分 mobx 代码，代码地址： <a href=\"https://jsbin.com/demelo/19/edit?html,js,console,output\" target=\"_blank\" rel=\"noopener\">示例代码</a></p>","more":"<p>详细代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// html</span></span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"console\"</span> /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; computed, observable, autorun &#125; = mobx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @observable firstName;</span><br><span class=\"line\">  @observable secondName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(firstName, secondName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.secondName = secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> fullName() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.firstName + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.secondName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wdz = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Demian'</span>, <span class=\"string\">'Wang'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> greet = observable.box(<span class=\"string\">'good morning! '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'console'</span>).innerText = greet + wdz.fullName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 动态更新dom内容</span></span><br><span class=\"line\">autorun(render);</span><br></pre></td></tr></table></figure>\n<p>此时网页 ui 为：</p>\n<p><img src=\"/2019/04/23/mobx初探/1.png\" alt=\"1\"></p>\n<h3 id=\"1-Computed-Values\"><a href=\"#1-Computed-Values\" class=\"headerlink\" title=\"1.Computed Values\"></a>1.Computed Values</h3><p>首先介绍一下计算属性。在上述代码中 fullName 就是计算属性。相信用过 vue 的对这个很熟悉。当我们在命令行手动修改 wdz 的 firstName 时，wdz 的 fullName 会自动更新</p>\n<p><img src=\"/2019/04/23/mobx初探/2.png\" alt=\"2\"></p>\n<p>此时网页 ui 也发生了实时的变化：</p>\n<p><img src=\"/2019/04/23/mobx初探/3.png\" alt=\"3\"></p>\n<p>可见，computed 属性可以响应 observable 属性的变化。</p>\n<p>值得一提的是，在 react 的 render 函数中，如果存在很多 props 的计算的话，可以使用 get 语法的形式将这部分逻辑抽离：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> fullName() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.firstName + <span class=\"keyword\">this</span>.props.secondName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &lt;div&gt;&#123;this.fullName&#125;&lt;/div&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 fullName 和可计算属性类似，依据传入的 props 属性动态变化。</p>\n<h3 id=\"2-Observable-State\"><a href=\"#2-Observable-State\" class=\"headerlink\" title=\"2.Observable State\"></a>2.Observable State</h3><p>通过在类属性前加上@observable，为该属性添加了可观察功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'mobx'</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @observable firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(firstName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用装饰器语法很简洁的使得 name 拥有了可观察的功能。</p>\n<p>那么 Observable 有什么作用呢？</p>\n<p>见以下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> greet = observable.box(<span class=\"string\">'good morning! '</span>);</span><br></pre></td></tr></table></figure>\n<p>我们为 greet 返回一个 observable 包装过的值，首先我们试着直接改变 greet 的值</p>\n<p><img src=\"/2019/04/23/mobx初探/4.png\" alt=\"4\"></p>\n<p>但是，此时网页 ui 没有实时变化：</p>\n<p><img src=\"/2019/04/23/mobx初探/5.png\" alt=\"5\"></p>\n<p>可见，原始类型在包装过之后，<strong>直接改变引用值不能触发页面动态更新</strong>，感兴趣的读者可以点击上面的链接打印出 greet 的属性，就能很直观的认识到 observable 的作用。</p>\n<p>以下是简化版的 observable：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简单的observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    value,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'get'</span>, <span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(newValue) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'set'</span>, newValue);</span><br><span class=\"line\">      <span class=\"comment\">// 向全局通知该数据更新</span></span><br><span class=\"line\">      report(<span class=\"keyword\">this</span>.value, newValue);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reactive代码</span></span><br><span class=\"line\">eventEmitter.on(<span class=\"string\">'report'</span>, (oldValue, newValue) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(oldValue, <span class=\"string\">'===&gt;'</span>, newValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通知给全局</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> report = <span class=\"function\">(<span class=\"params\">oldValue, newValue</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  eventEmitter.emit(<span class=\"string\">'report'</span>, oldValue, newValue);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>主要是使用 value 值存储原始类型，使用 get 获取 value 值，使用 set 更新 value 值。值得注意的是，在更新数据以前，set 方法会根据一定的配置，选择是否向全局发送更新事件，相应的一些 computed 的属性会接收到该事件。</p>\n<h3 id=\"3-Reactions\"><a href=\"#3-Reactions\" class=\"headerlink\" title=\"3.Reactions\"></a>3.Reactions</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'console'</span>).innerText = greet + wdz.fullName;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 动态更新dom内容</span></span><br><span class=\"line\">autorun(render);</span><br></pre></td></tr></table></figure>\n<p>当 observable 数据变化后，页面会自动更新 ui。</p>\n<h2 id=\"三、mobx-实战-实现一个-todoList\"><a href=\"#三、mobx-实战-实现一个-todoList\" class=\"headerlink\" title=\"三、mobx 实战-实现一个 todoList\"></a>三、mobx 实战-实现一个 todoList</h2><p>注：由于 create-react-app 创建的项目默认不能使用装饰器语法，所以笔者暴力的 eject 并安装了相应的 babel 配置。</p>\n<p>以下是 todoList 的项目结构：</p>\n<p><img src=\"/2019/04/23/mobx初探/6.png\" alt=\"6\"></p>\n<p>最终实现效果：</p>\n<p><img src=\"/2019/04/23/mobx初探/7.png\" alt=\"7\"></p>\n<p>项目地址：<a href=\"https://github.com/Demian1996/todo/tree/mobx-todo\" target=\"_blank\" rel=\"noopener\">todolist</a></p>\n<p>当我们使用 mobx 维护状态时，store 不像 redux 那样是全局唯一的，我们可以细粒度地维护一个个数据模型。在中小型的项目中，mobx 的 store 轻便简洁，使用起来很顺滑。</p>\n<p>项目中用到的 mobx 特性：</p>\n<h3 id=\"1-observable\"><a href=\"#1-observable\" class=\"headerlink\" title=\"1.observable\"></a>1.observable</h3><p>主要维护 todolist 的基本状态：待办列表 todolist、新建待办的内容 itemContent 和当前筛选类型 filterType</p>\n<p><img src=\"/2019/04/23/mobx初探/8.png\" alt=\"8\"></p>\n<h3 id=\"2-computed\"><a href=\"#2-computed\" class=\"headerlink\" title=\"2.computed\"></a>2.computed</h3><p>根据当前筛选器的类型，返回对应的 todoList。</p>\n<p><img src=\"/2019/04/23/mobx初探/9.png\" alt=\"9\"></p>\n<h3 id=\"3-reactions\"><a href=\"#3-reactions\" class=\"headerlink\" title=\"3.reactions\"></a>3.reactions</h3><p>筛选器状态变化后，响应式地打印出当前筛选器的状态。</p>\n<p><img src=\"/2019/04/23/mobx初探/10.png\" alt=\"10\"></p>\n<h3 id=\"4-actions\"><a href=\"#4-actions\" class=\"headerlink\" title=\"4.actions\"></a>4.actions</h3><p>点击筛选器后的状态切换和异步事件。这里需要使用 runInAction 包装异步函数，这样才可以完成响应式的更新数据。</p>\n<p><img src=\"/2019/04/23/mobx初探/11.png\" alt=\"11\"></p>\n<h2 id=\"四、Mobx-vs-Redux\"><a href=\"#四、Mobx-vs-Redux\" class=\"headerlink\" title=\"四、Mobx vs Redux\"></a>四、Mobx vs Redux</h2><p>两者都是优秀的状态管理工具，都可以帮助开发者完成业务开发。所以抛开业务场景谈论工具优劣是无意义的，笔者这里只是简单列出两者的区别。</p>\n<h3 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h3><p><img src=\"/2019/04/23/mobx初探/12.png\" alt=\"12\"></p>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><p><img src=\"/2019/04/23/mobx初探/13.png\" alt=\"13\"></p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p>笔者只是介绍了 mobx 的冰山一角，其作为一种响应式的状态管理库，在中小型项目中有着高效率的表现。响应式的写法、细粒度的 store 管理都体现了 mobx 的灵活性。</p>"}],"PostAsset":[{"_id":"source/_posts/Create-react-app中使用装饰器语法/1551331520473.png","slug":"1551331520473.png","post":"ck3ju70dp0002qgtriqqh1hu3","modified":0,"renderable":0},{"_id":"source/_posts/Create-react-app中使用装饰器语法/1551335060987.png","slug":"1551335060987.png","post":"ck3ju70dp0002qgtriqqh1hu3","modified":0,"renderable":0},{"_id":"source/_posts/Create-react-app中使用装饰器语法/1551335316388.png","slug":"1551335316388.png","post":"ck3ju70dp0002qgtriqqh1hu3","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/1.png","slug":"1.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/10.png","slug":"10.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/11.png","slug":"11.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/12.png","slug":"12.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/13.png","slug":"13.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/2.png","slug":"2.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/3.png","slug":"3.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/4.png","slug":"4.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/5.png","slug":"5.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/6.png","slug":"6.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/7.png","slug":"7.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/8.png","slug":"8.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0},{"_id":"source/_posts/mobx初探/9.png","slug":"9.png","post":"ck3ju70e70008qgtr8o706h7e","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck3ju70e10006qgtrgc83hsmo","tag_id":"ck3ju70du0003qgtrxe1s6zeq","_id":"ck3ju70eb0009qgtrg33dduui"},{"post_id":"ck3ju70dg0000qgtrfg9e8kie","tag_id":"ck3ju70du0003qgtrxe1s6zeq","_id":"ck3ju70ee000bqgtrh0akp9kv"},{"post_id":"ck3ju70dg0000qgtrfg9e8kie","tag_id":"ck3ju70e20007qgtrilu6vcxy","_id":"ck3ju70ef000cqgtranlyaure"},{"post_id":"ck3ju70dp0002qgtriqqh1hu3","tag_id":"ck3ju70du0003qgtrxe1s6zeq","_id":"ck3ju70ei000gqgtr0j6vcc04"},{"post_id":"ck3ju70dp0002qgtriqqh1hu3","tag_id":"ck3ju70ef000dqgtr6ows2gk8","_id":"ck3ju70ei000hqgtrdyjxek0d"},{"post_id":"ck3ju70dp0002qgtriqqh1hu3","tag_id":"ck3ju70eg000eqgtrhq98ho26","_id":"ck3ju70ej000jqgtrpmcslikq"},{"post_id":"ck3ju70dx0004qgtrjrct52t7","tag_id":"ck3ju70eh000fqgtrg5ngtyyn","_id":"ck3ju70ej000kqgtrxpwag7ft"},{"post_id":"ck3ju70dz0005qgtr9ben5eay","tag_id":"ck3ju70ej000iqgtrsksr00tx","_id":"ck3ju70ek000nqgtrqzec4f6u"},{"post_id":"ck3ju70dz0005qgtr9ben5eay","tag_id":"ck3ju70ek000lqgtrpvkj9s64","_id":"ck3ju70el000oqgtrjdja39q7"},{"post_id":"ck3ju70e70008qgtr8o706h7e","tag_id":"ck3ju70du0003qgtrxe1s6zeq","_id":"ck3ju70el000pqgtreabeds09"},{"post_id":"ck3ju70e70008qgtr8o706h7e","tag_id":"ck3ju70ek000mqgtrxca4ah37","_id":"ck3ju70em000qqgtrzck1pzru"}],"Tag":[{"name":"React","_id":"ck3ju70du0003qgtrxe1s6zeq"},{"name":"Design Pattern","_id":"ck3ju70e20007qgtrilu6vcxy"},{"name":"babel","_id":"ck3ju70ef000dqgtr6ows2gk8"},{"name":"mobx","_id":"ck3ju70eg000eqgtrhq98ho26"},{"name":"hexo","_id":"ck3ju70eh000fqgtrg5ngtyyn"},{"name":"FP","_id":"ck3ju70ej000iqgtrsksr00tx"},{"name":"分享","_id":"ck3ju70ek000lqgtrpvkj9s64"},{"name":"Mobx","_id":"ck3ju70ek000mqgtrxca4ah37"}]}}